<?xml version="1.0"?>



<!--
  Copyright 2016 Goldman Sachs.
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
  -->

<article>

    <articleinfo>
        <title>Reladomo Database Definition Generator</title>
        <pubdate>20 June 2006</pubdate>
        <author>Cameron Brien</author>
    </articleinfo>

    <sect1>

        <title>Introduction</title>
        <para>Database definition language (DDL) file generation is an optional feature in Reladomo that allows users to generate
            scripts to create tables, indices and foreign keys from the Reladomo object definition XML files.
            These scripts are stored in .ddl, .idx and .fk files, respectively. To date, there is support for Sybase and
            UDB databases.
        </para>

    </sect1>

    <sect1>

        <title>Usage</title>
            <para>
                DDL generation may be run through direct interaction with the <code>MithraDbDefinitionGenerator</code> class
                or, more simply, from an Ant task.
            </para>

        <sect2>
            <title>DDL Generation from Ant</title>
            <para>
            An Ant task provides users with a simple way to generate database files for a large set of Reladomo object
            definition XML files. Consider the following example as it points to a number of XML elements used by
            MithraDbDefinitionGenerator:
            </para>

            <programlisting language="xml"><![CDATA[<target name="generate-example-mithra-db"
        depends="compile-mithra-generator">
    <taskdef name="mithra-gen"
        classname = "com.gs.fw.common.mithra.generator.dbgenerator.MithraDbDefinitionGenerator"
        loaderRef="mithraGenerator">
        <classpath refid="mithragen.classpath"/>
    </taskdef>
    <mithra-gen xml="${example.home}/xml/mithra/example/ExampleClassList.xml"
        generatedDir="${generated.src.dir}/db"
        buildList="Product, ProductPrice"
        databaseType="sybase"/>
</target>]]></programlisting>

            <para>
            Of interest are the elements for the <code>mithra-gen</code> tag above.
            </para>

            <para>
            The <code>xml</code> element specifies the location
            of the Reladomo class list -- a list of all of the classes to be generated by Reladomo. By default, the DDL
            generator will create database definition files for all classes. If <code>buildList</code> is provided,
            the generator will only produce definition files for the classes listed. Keep in mind that the include list
            is a comma-separated list of the Reladomo classes associated with tables that one wishes to generate.
            </para>

            <para>
            The database type must be specified using the <code>databaseType</code> element. Acceptable values
            for the type are &quot;sybase&quot; and &quot;udb82&quot;.
            </para>

        </sect2>
            <sect2>
                <title>Direct DDL Generation</title>
                <para>
                To run DDL generation, one creates an instance of
                <code>com.gs.fw.common.mithra.generator.dbgenerator.MithraDbDefinitionGenerator</code> and makes a call to
                <code>MithraDbDefinitionGenerator.execute()</code>. Before calling <code>execute()</code>, one must set the
                destination directory for the generated database scripts, the location of the Reladomo object definition XML
                files and the database type with calls to <code>MithraDbDefinitionGenerator.setGeneratedDir()</code>,
                <code>setXml()</code> and <code>setDatabaseType()</code>, respectively.
                </para>
                <para>
                    The generator currently accepts &quot;sybase&quot; and &quot;udb82&quot; as possible database
                    types. If no database type is specified or an invalid type is provided, the generator throws a
                    <code>BuildException</code>.
                </para>
            </sect2>
    </sect1>

    <sect1>
        <title>Internals</title>
        <sect2>
            <title>Relevant Hierarchical Information</title>
                <para>
                    The <code>MithraDbDefinitionGenerator</code> class implements the abstract class <code>
                    AbstractMithraGenerator</code> and makes extensive use of the
                    <code>com.gs.fw.common.mithra.generator.MithraObjectTypeWrapper</code>  and
                    <code>com.gs.fw.common.mithra.databasetype.AbstractDatabaseType</code> classes.
                </para>
                <para>
                    A <code>MithraObjectTypeWrapper</code> object maps to a database table. As such, the generator uses it to gather
                    information about tables, their columns and their indexing.
                </para>
                <para>
                    The SQL data types used in the .ddl files are retrieved from the database-appropriate child of <code>AbstractDatabaseType</code>.
                    For example, if one specifies Sybase as the database type, the generator will determine the SQL data types from the
                    <code>SybaseDatabaseType</code> class.
                </para>
        </sect2>

        <sect2>
            <title>Caveats</title>
                <para>
                    In general, SQL data types match up reasonably well with Java data types. In cases of multiple options or ambiguity, the
                    developers were forced to choose specific or peculiar mappings. Where the mapping is not intuitive,
                    we have provided details:

                    <table frame="all" border="none">
                        <tgroup cols="3">
                        <colspec colnum="1" colname="col1" colwidth="1*"/>
                        <colspec colnum="2" colname="col2" colwidth="1.5*"/>
                        <colspec colnum="3" colname="col3" colwidth="1.5*"/>
                        <thead>
                            <row>
                                <entry>Java Type</entry>
                                <entry>Sybase</entry>
                                <entry>UDB</entry>
                            </row>
                        </thead>
                        <tbody>
                        <row>
                            <entry><code>long</code></entry>
                            <entry><code>numeric(18,0)</code></entry>
                            <entry><code>bigint</code></entry>
                        </row>
                        <row>
                            <entry><code>String</code></entry>
                            <entry><code>varchar()</code></entry>
                            <entry><code>varchar()</code></entry>
                        </row>
                        </tbody>
                        </tgroup>
                    </table>
                </para>

                <para>
                    It is also worth noting that unless <code>maxLength</code> is specified for a String attribute in its
                    Reladomo object definition XML, the generator will create a column of type <code>varchar(255)</code>.
                </para>
        </sect2>
    </sect1>
</article>
